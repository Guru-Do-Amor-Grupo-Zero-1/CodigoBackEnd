name: CI/CD para Spring Boot com Docker

on:
  push: 
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgre
          POSTGRES_DB: gurudoamor
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Clonar o reposit칩rio
        uses: actions/checkout@v3

      - name: Configurar o JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven

      - name: Configurar vari치veis de ambiente
        run: |
          echo "SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:5432/gurudoamor" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_USERNAME=postgres" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_PASSWORD=postgre" >> $GITHUB_ENV

      - name: Executar testes
        run: mvn test -B

  deploy:
    needs: build_and_test
    runs-on: ubuntu-latest

    steps:
      - name: Clonar o reposit칩rio
        uses: actions/checkout@v3

      - name: Adicionar chave SSH da VM
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.GCP_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.GCP_VM_HOST }} >> ~/.ssh/known_hosts

      - name: Copiar c칩digo para a VM
        run: |
          sudo apt-get update && sudo apt-get install -y rsync
          scp -r . ${{ secrets.GCP_VM_USER }}@${{ secrets.GCP_VM_HOST }}:/home/${{ secrets.GCP_VM_USER }}/backend

      - name: Build e Run do Docker na VM
        run: |
          ssh ${{ secrets.GCP_VM_USER }}@${{ secrets.GCP_VM_HOST }} << 'EOF'
            cd /home/${{ secrets.GCP_VM_USER }}/backend

            docker stop springboot-backend || true
            docker rm springboot-backend || true 

            docker build --no-cache -t springboot-backend .

            docker run -d --name springboot-backend -p 5000:5000 springboot-backend 
          EOF
